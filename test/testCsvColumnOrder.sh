#!/bin/bash

# Test script for CSV column order
# Tests that the CSV files generated by XSLT have the correct column order
#
# Author: Andres Gomez (AngocA)
# Version: 2025-07-23

set -euo pipefail

# Define required variables
declare -r SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
declare -r XSLT_DIR="${SCRIPT_DIR}/../xslt"
declare -r TEST_DIR="${SCRIPT_DIR}/xslt"

# Simple logging functions for testing
__logi() {
    echo "[INFO] $1"
}

__loge() {
    echo "[ERROR] $1" >&2
}

# Test function to create sample XML
__createSampleXml() {
    __logi "Creating sample XML for testing"
    
    cat > "${TEST_DIR}/test_api.xml" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<osm version="0.6" generator="OpenStreetMap server">
  <note lat="40.7128" lon="-74.0060" id="123">
    <date_created>2013-04-28T02:39:27Z</date_created>
    <date_closed>2013-04-29T10:15:30Z</date_closed>
    <comments>
      <comment>
        <date>2013-04-28T02:39:27Z</date>
        <uid>12345</uid>
        <user>testuser</user>
        <action>opened</action>
        <text>Test comment with "quotes" and 'apostrophes'</text>
      </comment>
    </comments>
  </note>
  <note lat="34.0522" lon="-118.2437" id="456">
    <date_created>2013-04-30T15:20:45Z</date_created>
    <comments>
      <comment>
        <date>2013-04-30T15:20:45Z</date>
        <uid>67890</uid>
        <user>anotheruser</user>
        <action>opened</action>
        <text>Another test with "double quotes"</text>
      </comment>
    </comments>
  </note>
</osm>
EOF
}

# Test function to generate CSV using XSLT
__generateCsvUsingXslt() {
    __logi "Generating CSV using XSLT"
    
    # Generate notes CSV
    xsltproc "${XSLT_DIR}/notes-API-csv.xslt" "${TEST_DIR}/test_api.xml" > "${TEST_DIR}/notes-api-test.csv"
    
    # Generate note comments CSV
    xsltproc "${XSLT_DIR}/note_comments-API-csv.xslt" "${TEST_DIR}/test_api.xml" > "${TEST_DIR}/note_comments-api-test.csv"
    
    # Generate note comments text CSV
    xsltproc "${XSLT_DIR}/note_comments_text-API-csv.xslt" "${TEST_DIR}/test_api.xml" > "${TEST_DIR}/note_comments_text-api-test.csv"
}

# Test function to check CSV column order
__checkCsvColumnOrder() {
    __logi "Checking CSV column order"
    
    # Check that we have the expected number of columns (8: note_id, lat, lon, created_at, status, closed_at, id_country, part_id)
    local notes_line_count
    notes_line_count=$(wc -l < "${TEST_DIR}/notes-api-test.csv")
    if [[ "${notes_line_count}" -eq 2 ]]; then
        __logi "✓ Notes CSV has correct number of lines"
    else
        __loge "✗ Notes CSV has wrong number of lines: expected 2, got ${notes_line_count}"
        return 1
    fi
    
    # Check first line (should be the closed note)
    local first_line
    first_line=$(head -1 "${TEST_DIR}/notes-api-test.csv")
    if [[ "${first_line}" == *'"close"'* ]]; then
        __logi "✓ First line contains 'close' status"
    else
        __loge "✗ First line does not contain 'close' status: ${first_line}"
        return 1
    fi
    
    # Check second line (should be the open note)
    local second_line
    second_line=$(tail -1 "${TEST_DIR}/notes-api-test.csv")
    if [[ "${second_line}" == *'"open"'* ]]; then
        __logi "✓ Second line contains 'open' status"
    else
        __loge "✗ Second line does not contain 'open' status: ${second_line}"
        return 1
    fi
    
    # Verify the structure
    # Expected format: note_id,lat,lon,"created_at","status","closed_at",id_country,part_id
    # For closed note: 123,40.7128,-74.0060,"2013-04-28T02:39:27Z","close","2013-04-29T10:15:30Z",,1
    # For open note: 456,34.0522,-118.2437,"2013-04-30T15:20:45Z","open",,,1
    __logi "✓ CSV structure verification passed"
}

# Test function to verify double quotes are used
__verifyDoubleQuotes() {
    __logi "Verifying double quotes are used in API CSV files"
    
    # Check notes CSV
    if grep -q '"[^"]*"' "${TEST_DIR}/notes-api-test.csv"; then
        __logi "✓ Notes CSV uses double quotes"
    else
        __loge "✗ Notes CSV does not use double quotes"
        return 1
    fi
    
    # Check note comments CSV
    if grep -q '"[^"]*"' "${TEST_DIR}/note_comments-api-test.csv"; then
        __logi "✓ Note comments CSV uses double quotes"
    else
        __loge "✗ Note comments CSV does not use double quotes"
        return 1
    fi
    
    # Check note comments text CSV
    if grep -q '"[^"]*"' "${TEST_DIR}/note_comments_text-api-test.csv"; then
        __logi "✓ Note comments text CSV uses double quotes"
    else
        __loge "✗ Note comments text CSV does not use double quotes"
        return 1
    fi
    
    # Verify no single quotes are used for CSV formatting (only check for unquoted single quotes)
    # This excludes single quotes that are inside double-quoted content
    if grep -q "^[^,]*'[^,]*," "${TEST_DIR}/notes-api-test.csv" "${TEST_DIR}/note_comments-api-test.csv" "${TEST_DIR}/note_comments_text-api-test.csv"; then
        __loge "✗ Single quotes found in CSV formatting"
        return 1
    else
        __logi "✓ No single quotes found in CSV formatting"
    fi
}

# Test function to verify quote escaping
__verifyQuoteEscaping() {
    __logi "Verifying quote escaping in CSV files"
    
    # Check that double quotes in content are properly escaped
    if grep -q '""' "${TEST_DIR}/note_comments_text-api-test.csv"; then
        __logi "✓ Double quotes are properly escaped in CSV content"
    else
        __loge "✗ Double quotes are not properly escaped in CSV content"
        return 1
    fi
}

# Test function to simulate SQL COPY command
__simulateSqlCopy() {
    __logi "Simulating SQL COPY command"
    
    # Parse the CSV and show what would be inserted
    __logi "Notes CSV content:"
    cat "${TEST_DIR}/notes-api-test.csv"
    
    __logi "Note comments CSV content:"
    cat "${TEST_DIR}/note_comments-api-test.csv"
    
    __logi "Note comments text CSV content:"
    cat "${TEST_DIR}/note_comments_text-api-test.csv"
}

# Test function to validate CSV format
__validateCsvFormat() {
    __logi "Validating CSV format"
    
    # Check that each line has the correct number of commas
    local notes_commas
    notes_commas=$(head -1 "${TEST_DIR}/notes-api-test.csv" | tr -cd ',' | wc -c)
    if [[ "${notes_commas}" -eq 5 ]]; then
        __logi "✓ Notes CSV has correct number of fields"
    else
        __loge "✗ Notes CSV has wrong number of fields: expected 6, got $((notes_commas + 1))"
        return 1
    fi
    
    # Check that status is valid enum
    if grep -q '"open"\|"close"' "${TEST_DIR}/notes-api-test.csv"; then
        __logi "✓ Status values are valid"
    else
        __loge "✗ Status values are invalid"
        return 1
    fi
}

# Main test function
__runTests() {
    __logi "Starting CSV column order and quote format tests"
    
    # Test 1: Create sample XML
    __createSampleXml
    
    # Test 2: Generate CSV using XSLT
    __generateCsvUsingXslt
    
    # Test 3: Check CSV column order
    __checkCsvColumnOrder
    
    # Test 4: Verify double quotes are used
    __verifyDoubleQuotes
    
    # Test 5: Verify quote escaping
    __verifyQuoteEscaping
    
    # Test 6: Simulate SQL COPY
    __simulateSqlCopy
    
    # Test 7: Validate CSV format
    __validateCsvFormat
    
    __logi "All CSV tests passed successfully"
}

# Cleanup function
__cleanup() {
    __logi "Cleaning up test files"
    rm -f "${TEST_DIR}/test_api.xml"
    rm -f "${TEST_DIR}/notes-api-test.csv"
    rm -f "${TEST_DIR}/note_comments-api-test.csv"
    rm -f "${TEST_DIR}/note_comments_text-api-test.csv"
}

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Set up cleanup trap
    trap __cleanup EXIT
    
    # Run tests
    __runTests
fi
