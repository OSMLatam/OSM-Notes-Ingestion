#!/bin/bash

# Mock wget command to retrieve a smaller Planet dump.
#
# Author: Andres Gomez
# Verison: 2025-07-14

#set -xv
# Fails when a variable is not initialized.
set -u
# Fails with an non-zero return code.
set -e
# Fails if the commands of a pipe return non-zero.
set -o pipefail
# Fails if an internal function fails.
set -E

# File for multiple API calls with consecutive calls.
COUNTS_FILE_API="/tmp/mock_wget_counts"

LOG=/tmp/mock_wget.log

# Base directory for the project.
declare SCRIPT_BASE_DIRECTORY
SCRIPT_BASE_DIRECTORY="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." \
 &> /dev/null && pwd)"
readonly SCRIPT_BASE_DIRECTORY

declare BASENAME
BASENAME=$(basename "${0}")
readonly BASENAME
declare TMP_DIR
TMP_DIR=$(mktemp -d "/tmp/${BASENAME}_XXXXXX")
readonly TMP_DIR

# Loads the global properties.
# shellcheck source=../etc/properties.sh
source "${SCRIPT_BASE_DIRECTORY}/etc/properties.sh"

# Location of the common functions.
FUNCTIONS_FILE="${SCRIPT_BASE_DIRECTORY}/bin/functionsProcess.sh"
# shellcheck source=../functionsProcess.sh
source "${FUNCTIONS_FILE}"

echo "====" >> "${LOG}"
date >> "${LOG}"
echo "Parameters: ${@}" >> "${LOG}"
# No params
if [[ -z "${1:-}" ]]; then
 echo "This is a mock wget command."

# wget --version
elif [[ "${1}" == "--version" ]]; then
 echo "Mock Wget for OSM Notes Profile"

# Retrieves Planet notes dump file md5.
# planet-notes-latest.osn.bz2.md5
elif [[ "${1}" == "-O" ]] \
 && [[ "${2:(-31)}" == "planet-notes-latest.osn.bz2.md5" ]] \
 && [[ "${3}" == "${PLANET}/notes/planet-notes-latest.osn.bz2.md5" ]]; then
 cp "${SCRIPT_BASE_DIRECTORY}/test/command/extra/mockPlanetDump.osn.bz2.md5" "${2}"
 echo "md5 planet" >> "${LOG}"

# API call.
# From  REQUEST="${OSM_API}/notes/search.xml?...
# To API_NOTES_FILE="${TMP_DIR}/OSM-notes-API.xml"
elif [[ "${1}" == "-O" ]] \
 && [[ "${2:(-17)}" == "OSM-notes-API.xml" ]] \
 && [[ "${3:0:37}" == "${OSM_API}" ]]; then

 declare ITERATION=0
 if [[ -r "${COUNTS_FILE_API}" ]]; then
  ITERATION=$(cat "${COUNTS_FILE_API}")
  ITERATION=$((ITERATION + 1))
  cp "${SCRIPT_BASE_DIRECTORY}/test/command/extra/apiCall_${ITERATION}.xml" "${2}"
  echo "${ITERATION}" > "${COUNTS_FILE_API}"
 else
  ITERATION=1
  echo "${ITERATION}" > "${COUNTS_FILE_API}"
  cp "${SCRIPT_BASE_DIRECTORY}/test/command/extra/apiCall_1.xml" "${2}"
 fi
 echo "api call ${ITERATION}" >> "${LOG}"

# User overpass interpreter
elif [[ "${1}" == "-O" ]] \
 && [[ "${3:0:12}" == "--post-file=" ]] \
 && [[ "${4}" == "${OVERPASS_INTERPRETER}" ]]; then

 # Countries file
 # From OVERPASS_COUNTRIES="${SCRIPT_BASE_DIRECTORY}/overpass/countries.op"
 # To COUNTRIES_FILE="${TMP_DIR}/countries"
 if [[ "${2:(-9)}" == "countries" ]]; then
  cp "${SCRIPT_BASE_DIRECTORY}/test/command/extra/countries" "${2}"
  echo "countries" >> "${LOG}"

 # Maritimes files
 # From OVERPASS_MARITIMES="${SCRIPT_BASE_DIRECTORY}/overpass/maritimes.op"
 # To MARITIMES_FILE="${TMP_DIR}/maritimes"
 elif [[ "${2:(-9)}" == "maritimes" ]]; then
  cp "${SCRIPT_BASE_DIRECTORY}/test/command/extra/maritimes" "${2}"
  echo "maritimes" >> "${LOG}"

 # Retrieves a JSON file
 # From QUERY_FILE="${TMP_DIR}/query" or QUERY_FILE="${QUERY_FILE}.${BASHPID}"
 # To JSON_FILE="${TMP_DIR}/${ID}.json"
 elif [[ "${2:(-5)}" == ".json" ]]; then
  JSONFILE=$(basename "$(echo "${2}")")
  cp "${SCRIPT_BASE_DIRECTORY}/test/command/extra/${JSONFILE}" "${2}"
  echo "boundary json ${JSONFILE}" >> "${LOG}"

 else
  echo "ERROR: Overpass interpreter."
  echo "error overpass interpreter" >> "${LOG}"
 fi

else
 echo "ERROR: Invalid parameter for mock wget."
 echo "error" >> "${LOG}"
fi
