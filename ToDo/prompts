# Prompts for OSM-Notes-profile

## Sequence Number Simplification (2025-07-26) - COMPLETED ✅

### Problem Identified
When processing notes by API and Planet, there was a redundant step that assigned sequence numbers in the database, but the XSLT transformations already generated these sequence numbers in the CSV files.

### Analysis
- **XSLT**: Already generates sequence numbers using `position()` function
- **SQL**: Was redundantly calculating and assigning sequence numbers again
- **Result**: Double processing, inefficiency, and potential for errors

### Solution Implemented
**Eliminated redundant sequence number assignment in SQL and use only XSLT-generated sequence numbers**

#### Files Modified:
1. **`sql/process/processPlanetNotes_43_commentsSequence.sql`**
   - Removed: Complex DO block for sequence assignment
   - Kept: Constraints and triggers for validation
   - Updated: Trigger function to only assign sequences when not provided by XSLT

2. **`sql/process/processAPINotes_33_loadNewTextComments.sql`**
   - Removed: DO block for sequence assignment
   - Simplified: Direct INSERT using sequence_action from XSLT

3. **`sql/process/processAPINotes_31_loadApiNotes.sql`**
   - Removed: DO block for sequence assignment
   - Updated: COPY statements to include sequence_action from XSLT

4. **`sql/process/processPlanetNotes_44_loadTextComments.sql`**
   - Removed: DO block for sequence assignment
   - Updated: COPY statement to include sequence_action from XSLT

5. **`sql/monitor/processCheckPlanetNotes_31_loadCheckNotes.sql`**
   - Removed: Two DO blocks for sequence assignment
   - Updated: COPY statements to include sequence_action from XSLT

### Benefits Achieved
- ✅ **Eliminated Redundancy**: No more double processing of sequence numbers
- ✅ **Improved Performance**: Faster processing without unnecessary SQL calculations
- ✅ **Reduced Complexity**: Simpler code with single source of truth (XSLT)
- ✅ **Better Maintainability**: Less code to maintain and debug
- ✅ **Consistency**: Sequence numbers always come from the same source

### Technical Details
- **XSLT Generation**: Uses `position()` function for sequential numbering
- **CSV Structure**: sequence_action column now always populated by XSLT
- **SQL Processing**: Direct COPY/INSERT without sequence recalculation
- **Fallback**: Trigger function still exists for manual inserts (when sequence not provided)

---

## Pending Validations (Future Work)

Cuando se procesan las notas por API y por planet, creo que hay un paso que les asigna el secuence number en la DB, pero viendo los xslt, al parecer se puede incorporar en la transformación al CSV. Si es así, podrías simplificar el código con esto.

Podrías hacer una validación de los archivo csv generados, para estar seguros que se insertan con la estructura correcta en la base de datos. Sobretodo que hay columnas con campos multivalor, o que pueden incluir comillas dobles, que estos son el separador de texto en el CSV; o sea, deberían venir escapados.

Puedes hacer una validación de todos los parámetros del archivo properties. Creo que ya hacíamos un var verificaciones, de si un número es entero y es positivo. Algo así debería aplicarse al resto de parámetros.

Se debería hacer validación de la conexión a la base de datos al principio, en checkPrereqs. Esto para asegurar que el proceso no va a fallar más adelante por conectividad hacia la DB.

Podrías hacer una validación de los archivos XSLT antes de usarlos, esto con el fin de asegurar la transformación.

Podrías validar que hay tamaño suficiente en disco para descargar el archivo planet  y expandirlo. Además, después se generan archivos CSV gigantes basados en esta info. También asegurar el espacio en disco para descargar todos los boundaries que son basantes.

Podrías validar que el formato de fechas en el XML sean con formato IS 8601.