# GitHub Actions Workflow for OSM-Notes-profile Tests
# Author: Andres Gomez (AngocA)
# Version: 2025-07-23

name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: osm_notes_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          postgresql-client \
          bats \
          pgtap \
          libxml2-dev \
          libxslt1-dev \
          xsltproc

    - name: Install Python dependencies
      run: |
        pip install requests pytest pytest-mock

    - name: Set up test environment
      run: |
        export TEST_DBNAME=osm_notes_test
        export TEST_DBUSER=testuser
        export TEST_DBPASSWORD=testpass
        export TEST_DBHOST=localhost
        export TEST_DBPORT=5432
        export LOG_LEVEL=INFO
        export MAX_THREADS=2

    - name: Run unit tests
      run: |
        chmod +x tests/run_tests.sh
        ./tests/run_tests.sh --bats-only

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          tests/results/
          *.log

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start containers
      run: |
        cd tests/docker
        docker-compose up -d --build

    - name: Wait for services to be ready
      run: |
        cd tests/docker
        docker-compose exec -T postgres pg_isready -U testuser -d osm_notes_test

    - name: Run integration tests
      run: |
        cd tests/docker
        docker-compose exec -T app bash -c "cd /app && ./tests/run_tests.sh --integration-only"

    - name: Stop containers
      if: always()
      run: |
        cd tests/docker
        docker-compose down

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          tests/docker/logs/
          tests/results/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        pip install requests pytest pytest-benchmark

    - name: Start PostgreSQL
      run: |
        docker run -d --name postgres-test \
          -e POSTGRES_DB=osm_notes_test \
          -e POSTGRES_USER=testuser \
          -e POSTGRES_PASSWORD=testpass \
          -p 5432:5432 \
          postgres:15

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U testuser; do
          sleep 1
        done

    - name: Run performance tests
      run: |
        export TEST_DBNAME=osm_notes_test
        export TEST_DBUSER=testuser
        export TEST_DBPASSWORD=testpass
        export TEST_DBHOST=localhost
        export TEST_DBPORT=5432
        python -m pytest tests/performance/ -v --benchmark-only

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: .benchmarks/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scanner
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Run ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        find . -name "*.sh" -exec shellcheck {} \; || true

    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: |
          bandit-report.json
          shellcheck-results.txt

  # Advanced Tests (Fase 3)
  advanced-tests:
    name: Advanced Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          shellcheck \
          bats \
          cmake \
          build-essential \
          libcurl4-openssl-dev \
          libelf-dev \
          libdw-dev

    - name: Install kcov
      run: |
        git clone https://github.com/SimonKagstrom/kcov.git
        cd kcov && mkdir build && cd build
        cmake .. && make && sudo make install

    - name: Run advanced tests
      run: |
        chmod +x tests/scripts/run_advanced_tests.sh
        ./tests/scripts/run_advanced_tests.sh --clean --verbose

    - name: Upload advanced test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: advanced-test-results
        path: |
          ./advanced_reports/
          ./coverage/
          ./security_reports/

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, advanced-tests]
    if: always()

    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results

    - name: Generate test summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Performance Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Advanced Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.advanced-tests.result }}" >> $GITHUB_STEP_SUMMARY

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          }); 